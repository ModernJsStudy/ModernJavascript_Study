# 4장 변수

<용어정리>

- 피연산자Operand : 값
- 평가Evaluation : 계산
- 리터럴(Literal)과 연산자(Operater, 기호)
- 표현식Expression : 식 전체
- 파싱Parsing : 해석

- **CPU**를 통해 연산
- **메모리(메모리 셀의 집합체 memory cell)**를 사용해 데이터를 기억

:: 메모리 셀은 1byte = 8bite, 메모리 주소를 갖는다(Memory address)

컴퓨터는 메모리 셀의 크기 1byte 단위로 데이터를 저장(write)하거나 읽어드린다(read)
메모리 주소는 메모리 공간의 위치 : 0부터 시작해 메모리의 크기만큼 정수로 표현된다.
ex. 4GB 메모리는 0부터 4,294,967,295 까지 메모리 주소를 갖는다

**데이터를 2진수로 처리 :** 메모리에 저장되는 데이터는 데이터의 종류(숫자, 텍스트, 이미지,동영상 등)과 상관없이 모두 2진수로 저장된다.

메모리 주소(임의의 위치)에 저장되고(기억) CPU는 이 값을 읽어서 연산을 수행
연산 결과로 생성된 숫자 값도 메모리 상의 임의의 위치에 저장된다.
연산의 결과가 메모리 주소 상 저장되는 것을 직접 접근하는 것은 오류를 남길 수 있어서 Js는 개발자의 직접적인 메모리 제어를 허용하지 않는다. → 이를 변수를 통해 해결한다.

**변수(Variable) : 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름**

- 변수의 이름(변수명) : 식별자 *(result)
- 프로그래밍 언어에서 값을 저장하고 참조하는 메커니즘으로 값의 위치를 가리키는 상징적인 이름.
- 변수는 프로그래밍 언어의 **컴파일러 또는 인터프리터에 의해** 값이 저장된 메모리 공간의 주소로치환되어 실행된다.
- 개발자가 직접 메모리 주소를 통해 값을 저장하고 참조할 필요가 없고 변수를 통해 안전하게 값에 접근할 수 있다.
- 변수에 값을 저장하는 것을 할당(대입, 저장. assignment)
- 변수에 저장된 값을 읽어들이는 것을 참조(reference)

변수 선언 Variable declaration : 변수를 생성하는 것
- 값을 저장하기 위한 메모리 공간을 확보하고 변수 이름과 확보된 메모리 공간의 주소를 연결해서 값을 저장할 수 있게 준비하는 것

var(함수 레벨 스코프), let, const 키워드 → var보다 let과 const를 더 많이 쓴다 ES6

**undefined** : **원시 타입의 값(primitive value)**
메모리 공간 확보함과 동시에 메모리 공간에는 자바스크립트 엔진에 의해 undefined 라는 값이 암묵적으로 할당되어 초기화된다.

변수 선언은 : 2단계에 걸쳐 된다.
선언 단계 - 초기화 단계

- 선언: 변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알린다.
- 초기화 : 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined 를 할당해 초기화한다. 변수가 선언된 이후 최초로 값을 할당하는 것을 말한다.

var 키워드로 선언한 변수는 **undefined**라는 값을 갖는다.
var : 선언과 동시에 초기화
변수에 암묵적으로 undefined 를 할당해 초기화한다.
초기화 되지 않았다면 남아있는 값이 있을 수 있는데 이를 쓰레기 값이라 한다. 
값을 할당하지 않은 상태에서 곧바로 변수 값을 참조하면 쓰레기 값이 나온다.


변수, 함수, 클래스 등 모든 식별자가 선언이 필요 → 안그러면 error 발생 **(ReferenceError 참조에러)**
식별자를 통해 값을 참조하려 했지만 자바스크립트 엔진이 등록된 식별자를 찾을 수 없을 때 발생하는 에러다.
자바스크립트는 준비 단계에서 변수 선언을 포함한 모든 선언문을 먼저 실행하고 나중에 선언문은 제외하고 소스코드를 한줄씩 실행한다.

→ **변수 선언은 런타임 이전에 먼저 실행된다: 이러한 특징을 변수 호이스팅(Variable hoisting)이라 한다.**

자바스크립트 엔진! 이 실행하는 것.

변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트의 특징을 **변수 호이스팅**이라 한다.

변수 선언뿐 아니라 var , let , const, function, finction*, ckass 키워드를 사용해서 선언하는 모든 식별자는 호이스팅 된다.

값을 할당(assignment)(대입, 저장) 할 때는 할당 연산자 =를 사용한다.
 할당 연산자는 우변의 값을 좌변 변수에 할당한다.
→ 값의 할당은 소스코드가 순차적으로 실행되는 시점인 **런타임**에 실행된다.


값의 재할당 : 처음으로 변수에 값을 할당하는 것도 사실 재할당이고 
변수에 저장된 값을 다른 값으로 변경하는 것을 변수의 역할, **재할당**이라 하고


값을 재할당 할 수 없어서 변수에 저장할 값을 변경할 수 없다면 변수가 아니라 **상수**라 한다.
재할당을 하게 되면 주소값을 달리하여 새 메모리 공간에 값을 저장한다.
사용하지 않는  값은 가비지 콜렉터에 의해 메모리에서 자동해제된다.
단, 메모리에서 언제 해제될지는 예측 할 수 없다.


**네이밍 컨벤션 naming convention : 하나이상의 영어단어로 구성된 식별자를 만들때 가독성 좋게 단어를 한눈에 구분하기 위해 규정한 명명 규칙**

- camelCase
- snake_case
- PascalCase
- typeHungarianCase
    - type + identifier ex) strFirstName
    - DOM 노드 ex) $elem
    - RxJS 옵저버블 ex) obserable$