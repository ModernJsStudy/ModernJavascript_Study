# Scope(유효범위)

- var vs let , const 키워드

모든 식별자는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을
참조할 수 있는 유효 범위가 결정된다.
이를 스코프라고 하고 스코프는 식별자가 유효한 범위를 말한다.


식별자 결정 : 이름이 같은 변수 중 어떤 변수를 참조해야 할 것인지 결정한다.
자바스크립트 엔진은 스코프를 통해 ㅓ떤 변수를 참조해야 할 것인지 결정한다.
스코프란 자바스크립트 엔진이 식별자를 검색할때 사용하는 규칙


코드를 실행한ㄹ때 ㅁ코드의 문맥을 고려한다.
코드가 어디서 실행되며 주변에 어떤 코드가 있는지에 따라 위처럼 동일한 코드도 다른 결과를 만들어 낸다.
: 렉시컬 환결, 


Context = lexical ennvironment

execution context 실행컨텍스- 모든 코드는 여기에서 평가되고 실행된다.
scope 는 실행 컨텍스트와 깊은 관련이 있다.


코드의 가장 바깥 영역ㅇ ㅔ선언된 x변수는 어디서든 참조가 가능하다
foo 함수 내부에서 선언된 x변수는 foo 함수 내부에서만 참조할 수 있고 foo 함수 외부에서는 참조할 수 없다.

두개의 x변수는 식별자 이름이 동일하지만자신이 유효한 범위, 스코프가 다른 별개의 변수다.



하나의 값은 유일한 식별자에 연결되어야한다 name binding


파일 이름은 하나의 파일을 구별하여 식별할 수 잇는 식별자다.
식별자인 파일 이름은 유알해야 ㅎ나다.


스코프 내에서 식별자는 유일해야 하지만 다른 스코프에는 같은 이름의 식별자르 사용할 수 있다. 
scope = namespace

 var 선언된 변수는 같은 스코프 내에서 중복 선언이 허용된다.
 이는 의도치 않게 변수값이 재할당되어 변경되는 부작용을 발생시킨다.



let, const 키어드 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다.


* 전역global : 코드의 가장 바깥 영역 ; 전역 스코프 : 전역변수
* 지역local : 함수 몸체 내부 : 지역 스코프 : 지역변수


전역변수는 어디서든지 참조가능
지역(함수 몸체 내부)? ㅣ 자신의 지역 스코프와 하위 지역 스코프에서 유효범위


# 스코프 체인
함수 몸체 내부에서 함수가 정의 된 것을 '함수의 중첩'
함수 몸체 내부에서 정의한 함수를 중첩함수, 중첨함수를 포함하는 함수를 외ㅓ부함수라고 하낟.
스코프가 함수의 중첩에 의해 계층적 구조를 갖는것

상위 스코프


계층정 연결된 스코프를 스코프 체인이라고 한다.
최상위 스코프인 전역 스코프, 전역에서 선언된 outer 함수의 지역 스코프, 
outer 함수 내부에서 선언된 inner 함수의 지역 스코프로 이뤄진다.


변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 
변수를 참조하는 코드의 스코프에서 시작해 상위 스코프 방향으로 이동하며 
선언된 변수를 검색한다.

상위 스코프에서 선언한 변수를 하위 스코프에서도 참조할 수 이싿.
스코프 체인은 물리적인 실체로 존재한다.

자바 스크립트 엔진은 코드를 실행하기 앞서 위 그림과 유한 자료구조인 lexical ennvironment를 실제로 생성
변수 선언이 실행되면 변수 식별자가 이 자료구조에 키로 등록되고 변수 할당이 일어나면 이 자료구조의 변수 식별자에 해당하는 값을 변경한다.
변수의 검색도 이 자료구조 상에서 이뤄진다.



x변수를 참조하는 코드의 스코프인 inner 함수의 지역 스코프에서 x변수가 선언되었는지 검색한다.
inner 함수 내에는 선언된 x변수가 존재한다 
따라서 검색되는 변수를 참조하고 검색을 종료한다.


y변수를 참조하는 코드의 스코프인 inner 함수의 지역 스코프에서 y변수가 선언되었는지 검색한다.
inner 함수 내에는 y변수의 선언이 존재하지 않으므로 상위 스코프인 outer 함수의 지역 스코프로 이동한다.

z변수를 참조하는 코드의 스코프인 inner 함수의 지역 스코프에서 z변수가선언되었는지 검색한다.
inner 함수 내에는 z변수의 선언이 존재하지 않으므로 상위 스코프인 outer 함수의 지역 스코프로 이동한다.
outer 함수 내에는 z변수의 선언이 존재한다.
따라서 검색된 변수를 참조하고 검색을 종료한다.


하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없다는 것을 의미


scope는 식별자는 검색하는 규칙



함수레벨의 스코프 ; 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다는 의미



블록 레벨 스코프 block level scope 
var 키워드로 선언된 변수는 오로지 함수의 코들 블로만을 지역 스코프로 인정한다 .: 함수레벨 스코프

1) 함수를 어디서 호출했는지에 따라 함수의 상위 스코프를 결정한다.
2) 함수를 어디서 정의했는지에 따라 함수의 상위 스코프를 결정한다.

동적 스코프 : 힘수를 정의하는 시점에는 함수가 어디서 호출될지 알 수 없다.
따라서 함수가 호출되는 시점에 동적으로 상위 스코프를 결정해야 하기 때문에 동적 스코프라고 부른다.

두번째 방식을 렉시컬 스코프 또는 정적 스코프라고 한다.
동적 스코프 방식처럼 상위 스코프가 동적으로 변하지 않고 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정되 때문에 정적 스코프라고 부른다.

 렉시컬 스코프는 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는지에 따라 상위 스코프를 결정한다.
 함수가 호출된 위치는 상위 스코프 결정에 어떠한 영향도 주지 않는다.
 함수의 상위 스코프는 언제나 자신이 정의된 스코프다.

 함수의 상위 스코프는 함수 정의가 실행되루 때 정적으로 결정된다.
 함수 정의가 실행되어 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다.
 함수가 호출될 때마다 함수의 상위 스코프를 참조할 필요가 있기 때문이다.

# 클로저